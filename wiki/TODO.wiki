#summary A TODO list for the project...
#labels Featured,Phase-Requirements

==Version 0.1-beta1 "stability" -- 0%==
  * ferret out as many bugs as possible
  * test on as many platforms as possible
  * build python install script #low priority
  * profile engine and optimize bottlenecks...
  * finish writing nice doc-strings, tutorials, and an API reference manual.
  * Write a "Making a fast 3d game in PYGGEL" document, explaining some of the ways to make a PYGGEL game go faster... Such as StaticObjectGroups, VertexArray vs. Image3D particle effects, multiple "transitional" scenes - instead of one monster scene, etc.

==Version 0.07-alpha3 "features" -- 0%==
  * add shader support #medium priority
  * enable shadows via shaders (might be as simple as implementing shader) #medium
  * look into creating a color picker and testing speed trade-offs... #low
  * implement Cal3D animated models #high
  * implement ODE (for at least collisions, but go for fully...) #medium
  * implement some kind of fast depth sorting #very low
  * allow true blending on all objects (once depth sorting is in) #extremely low
  * Add a 2d gui! #medium
  * Add 3d sound module using pygame, OpenAL or pymedia #medium-low PyMedia seems best...
  * Splitting the view among viewports - and having Ortho match... #low priority
  * Write some doc-strings, a few more tutorials...
  * Write a new input API - allowing seamless integration with the gui, but also giving some more/faster ways to look up the state of input devices...


==Version 0.06-alpha2 "speed" -- 0%==
  * Allow each scene to have eight lights, and have them generate automatically - instead of only 8 global lights... #medium
  * Add AABox, Sphere and QuadTree objects into PYGGEL - added to objects and the scene... #high priority - lots of potential uses for that I think...
  * use QuadTree and Sphere bounding volumes to perform frustum culling on all objects #high priority
  * Add Cached and simple versions of A-star #medium priority
  * Add subImage rendering for 2D - ie, a lot of images in one, only rendering a part though... #high
  * Look into porting to use pyglet, see if the speed increase is any - in which case we may be able to inherit pyglets 2d API, and that would solve subImage and other things like that well :)
  * Look into adding support for VertexBuffer objects (in addition to the VertexArrays) #low - not sure if it will be any speed boost with them changing a lot, we'll see though...


==Version 0.05-alpha1 "start" -- 99%==
  * Toggling of display settings #Done!
  * Image2D/Image3D #Done!
  * OBJ mesh loading #Done!
  * Geometry classes #Done - ongoing (if/when we need more types)
  * Texture, DisplayList and VertexArray #Done!
  * Particle effects #Done!
  * Picking #Done - only select buffer picking for now - save color buffer picking for next release (if any...)
  * Camera class objects: Third-person, First-person #Done!
  * math3d class with Vector, Sphere and AABox features (among other standard 3d functions) #Done! (math functions ongoing...)
  * Font support #Done!
  * add a get_real_pos to camera's #sorta working - LookFromCamera's work, LookAt ones only return the position they are looking at...