#summary A TODO list for the project...
#labels Featured,Phase-Requirements

==Future==
  * Look into using compiled parts for optimizations (Cython, Pyrex, etc....)

==Version 0.1-beta1 "stability" -- 0%==
  * ferret out as many bugs as possible
  * test on as many platforms as possible
  * build python install script #low priority
  * profile engine and optimize bottlenecks...
  * finish writing nice doc-strings, tutorials, and an API reference manual.
  * Write a "Making a fast 3d game in PYGGEL" document, explaining some of the ways to make a PYGGEL game go faster... Such as StaticObjectGroups, VertexArray vs. Image3D particle effects, multiple "transitional" scenes - instead of one monster scene, etc.
  * Ensure API is consistent, guessable and intelligent...
  * Fix the order of specifying vertices so that back face culling works

==Version 0.08-alpha4 "features" -- 0%==
  * add shader support #medium priority
  * enable shadows via shaders (might be as simple as implementing shader) #medium
  * look into creating a color picker and testing speed trade-offs... #low
  * implement Cal3D animated models #high
  * implement ODE (for at least collisions, but go for fully...) #medium
  * implement some kind of fast depth sorting #very low
  * allow true blending on all objects (once depth sorting is in) #extremely low
  * Add 3d sound module using pygame, OpenAL or pymedia #medium-low PyMedia seems best...
  * Splitting the view among viewports - and having Ortho match... #low priority
  * Write some doc-strings, a few more tutorials...
  * Add Cached and simple versions of A-star #low priority


==Version 0.07-alpha3 "features and stability" -- 75% Completed==
  * Add a "scaletowindow" attribute to all 2d things - basically, use code to place things at optimum size (eg, 640, 480) and if the window is changed to like (800, 600) then the images and such are scaled and mouse events are scaled - so the code stays the same... #DONE! added equivalent functionality
  * Write a new input API - allowing seamless integration with the gui, but also giving some more/faster ways to look up the state of input devices... #Done! - basically, might need more features as we continue...
  * Add a 2d gui! #medium - 25% done - layout and basic widgets done.
  * implement animated 2d images - sprite sheets, "gif's"?, multiple images, etc. #DONE!
  * add support for custom cursors through the view... #DONE!


==Version 0.06-alpha2 "speed" -- 100% Released!==
  * Allow each scene to have eight lights, and have them generate automatically - instead of only 8 global lights... #DONE!
  * Add AABox, Sphere and QuadTree objects into PYGGEL - added to objects and the scene... #Done - Quad/Oct Tree's too slow...
  * Instead of a Quad/Oct Tree, use a "hash tree" - a dict of nodes #DONE!
  * use Sphere bounding volumes to perform frustum culling on all objects #Not happening, either as true frustum use, or with a SpaceTree object...
  * Add subImage rendering for 2D - ie, a lot of images in one, only rendering a part though... #Done!
  * Look into porting to use pyglet #Done - not porting
  * Look into adding support for VertexBuffer objects (in addition to the VertexArrays) #Sort of done - created a test, not any faster as far as I can tell, and I can't get them to display or correctly or update without recreation - so not much use. Perhaps will revisit at a later time.
  * Test new collision detection and partition culling features! #Failed, miserably, a lot of the functionality wasn't correctly implemented, and to get it working causes the code to become far to complicated, both the source and the API-usage - all features removed (VolumeStore, SpaceTree's, etc.)


==Version 0.05-alpha1 "start" -- 100% -- Released!==
  * Toggling of display settings #Done!
  * Image2D/Image3D #Done!
  * OBJ mesh loading #Done!
  * Geometry classes #Done - ongoing (if/when we need more types)
  * Texture, DisplayList and VertexArray #Done!
  * Particle effects #Done!
  * Picking #Done - only select buffer picking for now - save color buffer picking for next release (if any...)
  * Camera class objects: Third-person, First-person #Done!
  * math3d class with Vector, Sphere and AABox features (among other standard 3d functions) #Done! (math functions ongoing...)
  * Font support #Done!